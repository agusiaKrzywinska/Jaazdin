"const { dialogUtils, genericUtils } = chrisPremades.utils;\n\nconst selectedReload = workflow.activity.name.toLowerCase();\n// console.log(workflow.activity.name);\n\nconst ammoWeapons = workflow.actor.items.filter((item) => {\n    if (!item.type === \"weapon\") {\n        return false;\n    }\n    if (!item.system?.properties) {\n        return false;\n    }\n    if (!item.system.properties.has(\"amm\")) {\n        return false;\n    }\n    if (item.system?.uses?.value === null) {\n        return false;\n    }\n    return true;\n});\n\nif (ammoWeapons.length === 0) {\n    genericUtils.notify(\"Reload | No weapons found to reload\", \"warn\");\n    return;\n}\n\nconst weaponId = await dialogUtils.selectDialog(\"Select Weapon\", \"Reload\", {\n    label: \"Select a weapon to reload\",\n    name: \"selectedWeapon\",\n    options: {\n        options: ammoWeapons.map((item) => {\n            return {\n                label: `${item.name} (${item.system.uses.value}/${item.system.uses.max})`,\n                value: item._id,\n            };\n        }),\n    },\n});\n\nif (!weaponId && weaponId !== 0) {\n    genericUtils.notify(\"Reload | No weapon selected\", \"warn\");\n    return;\n}\n\nlet sources = [];\n\nif (selectedReload === \"barrel\" || selectedReload === \"pump\") {\n    sources = workflow.actor.items.filter((item) => {\n        if (item.type !== \"consumable\") {\n            return false;\n        }\n        if (item.system?.type?.value !== \"ammo\") {\n            return false;\n        }\n        if (!item.system?.quantity || item.system.quantity <= 0) {\n            return false;\n        }\n        return true;\n    });\n} else {\n    sources = workflow.actor.items.filter((item) => {\n        return item.flags.TftJC?.isAmmoContainer;\n    });\n}\n\nif (!sources || sources.length === 0) {\n    genericUtils.notify(\"Reload | No ammo found\", \"warn\");\n    return;\n}\nconst selectedWeapon = workflow.actor.items.get(weaponId);\nconst clipSize = selectedWeapon.system.uses.max;\nconst missingAmmo = selectedWeapon.system.uses.spent;\n\nif (missingAmmo <= 0) {\n    genericUtils.notify(\"Reload | Weapon is already fully loaded\", \"warn\");\n    return;\n}\n\nconst ammoId = await dialogUtils.selectDialog(\"Reload Source\", \"Reload\", {\n    label: \"Select ammo to use\",\n    name: \"selectedAmmo\",\n    options: {\n        options: sources.map((item) => {\n            return {\n                label: `${item.name} (${item.system.quantity})`,\n                value: item._id,\n            };\n        }),\n    },\n});\n\nif (!ammoId) {\n    genericUtils.notify(\"Reload | No ammo selected\", \"warn\");\n    return;\n}\n\nconst selectedAmmo = workflow.actor.items.get(ammoId);\n\nif (selectedReload === \"barrel\" || selectedReload === \"pump\") {\n    const unloadedAmmo = selectedAmmo.system.quantity;\n    if (unloadedAmmo <= 0) {\n        genericUtils.notify(\"Reload | No ammo available to load\", \"warn\");\n        return;\n    }\n\n    const ammoToLoad = await dialogUtils.numberDialog(\"Reload Amount\", \"Reload\", {\n        label: \"Select amount of ammo to load\",\n        name: \"ammoToLoad\",\n    });\n\n    console.log(\"ammoToLoad\", ammoToLoad);\n    console.log(\"selectedWeapon\", selectedWeapon);\n\n    if (ammoToLoad === null || ammoToLoad <= 0) {\n        genericUtils.notify(\"Reload | Invalid amount selected\", \"warn\");\n        return;\n    }\n\n    if (ammoToLoad > unloadedAmmo) {\n        genericUtils.notify(\"Reload | Not enough ammo available\", \"warn\");\n        return;\n    }\n\n    if (ammoToLoad > missingAmmo) {\n        genericUtils.notify(\"Reload | Too much ammo selected\", \"warn\");\n        return;\n    }\n\n    await selectedWeapon.update({\n        \"system.uses.spent\": missingAmmo - ammoToLoad,\n    });\n    await selectedAmmo.update({\n        \"system.quantity\": unloadedAmmo - ammoToLoad,\n    });\n    await workflow.actor.sheet.render(true);\n    return genericUtils.notify(`Reload | Reloaded ${ammoToLoad} ammo into ${selectedWeapon.name}`, \"info\");\n}\n\nconst ammoUses = selectedAmmo.system.uses;\n\nconsole.log(\"ammoUses\", ammoUses);\n\nif (!ammoUses) {\n    genericUtils.notify(\"Reload | Selected ammo does not have uses defined\", \"warn\");\n    return;\n}\n\nconst ammoInContainer = ammoUses.max - ammoUses.spent;\nif (ammoInContainer <= 0) {\n    genericUtils.notify(\"Reload | Selected ammo is empty\", \"warn\");\n    return;\n}\nconst ammoToUse = Math.min(missingAmmo, ammoInContainer, clipSize);\nawait selectedWeapon.update({\n    \"system.uses.spent\": missingAmmo - ammoToUse,\n});\nawait selectedAmmo.update({\n    \"system.uses.spent\": ammoUses.spent + ammoToUse,\n});\nawait workflow.actor.sheet.render(true);\nreturn genericUtils.notify(`Reload | Reloaded ${ammoToUse} ammo into ${selectedWeapon.name}`, \"info\");"